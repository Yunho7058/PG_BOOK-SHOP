코드 작성 
    1. mariadb.js : db연동
    2. user.js 회원가입
        status code를 관리하기 위해 -> npm install http-status-codes --save
        : status code 200,400 다른이들이 봣을때 정확히 무슨 뜻인지 알수가 없기 때문에 한눈에 알아 볼 수 있게 표시
    3. 코드 구조화 controller 폴더 만들어 UserController.js 생성후 API 로직 작성
    4. UserController.js -> 로그인,회원가입,비밀번호초기화
    (주기적으로 설계 API 변경)

node.js 구조
    현재까지 작성한 코드는 라우터에 로직이 작성되어있어 나중에 코드가 많아 질수록 
    가독성 떨어지고 트러블 슈팅 어려워지고 유지보수 또한 떨어진다.
    (ex. routes/users.js 안에 api 로직이 다 작성되어있다.)
    -> 이를 해결하기위해 로직은 쪼개서 관리하는게 좋음 구조화
    
    해결방법
        1. 콜백함수를 빼서 작성하자 -> 
        컨트롤러 파일을 만들어 관리하기 (라우터를 통해 들어오는 요청을 컨트롤러가 처리 )
        2. routes 는 길을 찾는 역할만 맡기기
        3. 로직일은 컨트롤러가 처리하기

    403 : 너는 여기 접근할 권리없다. -> forbidden (나는 너를 알고있고 너한테 권리가 없다)
    401 : 비인증 상태 -> unauthorized (나는 너가 누군지 모른다)

crypto 암호화 모듈 (node 내장된 모듈)
    단방향 암호화
    const salt = crypto.randomBytes(64).toString('base64');
        비밀번호 만들기 랜덤 바이트 문자열로 변경하여 변수에 담기
        랜덤으로 지정하여 가져가게 하기
        암호화된 비밀번호

    const hashPwd = crypto.pbkdf2Sync(password, salt, 10000, 64, 'sha512').toString('base64');
        pbkdf2Sync(비밀번호,salt,해쉬함수를 반복하는 함수 ,키 길이,알고리즘 )

    회원가입시 비밀번호를 암호화해서 암호화한 비밀번호화, salt 값 같이 저장
    로그인시 -> 이 두개 대입해서 비교

    => salt 암호화키를 이용해 사용자가 입력한 비밀번호를 salt 암호화 키를 이용해 hashPwd 비밀번호를 암호화 시키고
        DB에 암호화키(salt)와 암호화된 비밀번호(hashPwd) 저장
        로그인시 사용자가 입력한 비밀번호를 암호화할때 db 저장되어있던 암호화키를 가져와 사용자가 방금 입력한
        비밀번호를 암호화 시키고 db 에 저장된 암호화된 비밀번호와 비교하여 로그인 진행
    

